// Code generated by MockGen. DO NOT EDIT.
// Source: /home/yathakka/go/src/github.com/aws/amazon-vpc-resource-controller-k8s/pkg/provider/branch/trunk/queue.go

// Package mock_trunk is a generated GoMock package.
package mock_trunk

import (
	reflect "reflect"

	trunk "github.com/aws/amazon-vpc-resource-controller-k8s/pkg/provider/branch/trunk"
	gomock "github.com/golang/mock/gomock"
)

// MockQueueInterface is a mock of QueueInterface interface.
type MockQueueInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQueueInterfaceMockRecorder
}

// MockQueueInterfaceMockRecorder is the mock recorder for MockQueueInterface.
type MockQueueInterfaceMockRecorder struct {
	mock *MockQueueInterface
}

// NewMockQueueInterface creates a new mock instance.
func NewMockQueueInterface(ctrl *gomock.Controller) *MockQueueInterface {
	mock := &MockQueueInterface{ctrl: ctrl}
	mock.recorder = &MockQueueInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueInterface) EXPECT() *MockQueueInterfaceMockRecorder {
	return m.recorder
}

// Capacity mocks base method.
func (m *MockQueueInterface) Capacity() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capacity")
	ret0, _ := ret[0].(int)
	return ret0
}

// Capacity indicates an expected call of Capacity.
func (mr *MockQueueInterfaceMockRecorder) Capacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capacity", reflect.TypeOf((*MockQueueInterface)(nil).Capacity))
}

// Dequeue mocks base method.
func (m *MockQueueInterface) Dequeue() (*trunk.ENIDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].(*trunk.ENIDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockQueueInterfaceMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockQueueInterface)(nil).Dequeue))
}

// Elements mocks base method.
func (m *MockQueueInterface) Elements() []*trunk.ENIDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Elements")
	ret0, _ := ret[0].([]*trunk.ENIDetails)
	return ret0
}

// Elements indicates an expected call of Elements.
func (mr *MockQueueInterfaceMockRecorder) Elements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Elements", reflect.TypeOf((*MockQueueInterface)(nil).Elements))
}

// Enqueue mocks base method.
func (m *MockQueueInterface) Enqueue(value *trunk.ENIDetails) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", value)
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockQueueInterfaceMockRecorder) Enqueue(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueueInterface)(nil).Enqueue), value)
}

// EnqueueFront mocks base method.
func (m *MockQueueInterface) EnqueueFront(value *trunk.ENIDetails) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueFront", value)
}

// EnqueueFront indicates an expected call of EnqueueFront.
func (mr *MockQueueInterfaceMockRecorder) EnqueueFront(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueFront", reflect.TypeOf((*MockQueueInterface)(nil).EnqueueFront), value)
}

// First mocks base method.
func (m *MockQueueInterface) First() (*trunk.ENIDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First")
	ret0, _ := ret[0].(*trunk.ENIDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockQueueInterfaceMockRecorder) First() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockQueueInterface)(nil).First))
}

// Last mocks base method.
func (m *MockQueueInterface) Last() (*trunk.ENIDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(*trunk.ENIDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockQueueInterfaceMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockQueueInterface)(nil).Last))
}

// Size mocks base method.
func (m *MockQueueInterface) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockQueueInterfaceMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockQueueInterface)(nil).Size))
}
